# Partial Regression for X1
# Regress Y on X2 and get residuals
residuals_Y_X2 <- residuals(lm(Y ~ X2, data = df))
# Regress X1 on X2 and get residuals
residuals_X1_X2 <- residuals(lm(X1 ~ X2, data = df))
# Plot residuals
plot(residuals_X1_X2, residuals_Y_X2,
xlab = "Residuals of X1 | X2",
ylab = "Residuals of Y | X2",
main = "Partial Regression Plot for X1")
abline(lm(residuals_Y_X2 ~ residuals_X1_X2), col = "blue")
# Partial Regression for X2
# Regress Y on X1 and get residuals
residuals_Y_X1 <- residuals(lm(Y ~ X1, data = df))
# Regress X2 on X1 and get residuals
residuals_X2_X1 <- residuals(lm(X2 ~ X1, data = df))
# Plot residuals
plot(residuals_X2_X1, residuals_Y_X1,
xlab = "Residuals of X2 | X1",
ylab = "Residuals of Y | X1",
main = "Partial Regression Plot for X2")
abline(lm(residuals_Y_X1 ~ residuals_X2_X1), col = "blue")
# Partial Regression for X2
# Regress Y on X1 and get residuals
residuals_Y_X1 <- residuals(lm(Y ~ X1, data = df))
# Regress X2 on X1 and get residuals
residuals_X2_X1 <- residuals(lm(X2 ~ X1, data = df))
# Plot residuals
plot(residuals_X2_X1, residuals_Y_X1,
xlab = "Residuals of X2 | X1",
ylab = "Residuals of Y | X1",
main = "Partial Regression Plot for X2")
abline(lm(residuals_Y_X1 ~ residuals_X2_X1), col = "blue")
# Partial Residual Plot for X1
partial_residual_X1 <- residuals_Y_X2 + coef(model)["X1"] * df$X1
plot(df$X1, partial_residual_X1,
xlab = "X1",
ylab = "Partial Residual",
main = "Partial Residual Plot for X1")
abline(lm(partial_residual_X1 ~ df$X1), col = "blue")
# Partial Residual Plot for X2
partial_residual_X2 <- residuals_Y_X1 + coef(model)["X2"] * df$X2
plot(df$X2, partial_residual_X2,
xlab = "X2",
ylab = "Partial Residual",
main = "Partial Residual Plot for X2")
abline(lm(partial_residual_X2 ~ df$X2), col = "blue")
# Partial Regression for X1
# Regress Y on X2 and get residuals
residuals_Y_X2 <- residuals(lm(Y ~ X2, data = df))
# Regress X1 on X2 and get residuals
residuals_X1_X2 <- residuals(lm(X1 ~ X2, data = df))
# Plot residuals
plot(residuals_X1_X2, residuals_Y_X2,
xlab = "Residuals of X1 | X2",
ylab = "Residuals of Y | X2",
main = "Partial Regression Plot for X1")
abline(lm(residuals_Y_X2 ~ residuals_X1_X2), col = "blue")
# Partial Regression for X2
# Regress Y on X1 and get residuals
residuals_Y_X1 <- residuals(lm(Y ~ X1, data = df))
# Regress X2 on X1 and get residuals
residuals_X2_X1 <- residuals(lm(X2 ~ X1, data = df))
# Plot residuals
plot(residuals_X2_X1, residuals_Y_X1,
xlab = "Residuals of X2 | X1",
ylab = "Residuals of Y | X1",
main = "Partial Regression Plot for X2")
abline(lm(residuals_Y_X1 ~ residuals_X2_X1), col = "blue")
# Partial Residual Plot for X1
partial_residual_X1 <- residuals_Y_X2 + coef(model)["X1"] * df$X1
plot(df$X1, partial_residual_X1,
xlab = "X1",
ylab = "Partial Residual",
main = "Partial Residual Plot for X1")
abline(lm(partial_residual_X1 ~ df$X1), col = "blue")
# Partial Residual Plot for X2
partial_residual_X2 <- residuals_Y_X1 + coef(model)["X2"] * df$X2
plot(df$X2, partial_residual_X2,
xlab = "X2",
ylab = "Partial Residual",
main = "Partial Residual Plot for X2")
abline(lm(partial_residual_X2 ~ df$X2), col = "blue")
# Load necessary library for reading Excel files
library(readxl)
# Load the data
data <- read_excel("Electricity_Data.xlsx")
data
View(data)
data
# Convert the data to a data frame
df <- as.data.frame(data)
df
# Fit the linear model
model <- lm(Y ~ X, data = df)
# Plot Residuals vs Fitted values
plot(fitted(model), residuals(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted (Before Transformation)")
abline(h = 0, col = "red")
# QQ plot of residuals
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
# Load necessary library for Box-Cox transformation
install.packages("MASS")
library(MASS)
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data = df), plotit = TRUE)
# Load necessary library for Box-Cox transformation
library(MASS)
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data = df), plotit = TRUE)
# Load necessary library for reading Excel files
library(readxl)
# Load the data
data <- read_excel("Electricity_Data.xlsx")
# Convert the data to a data frame
df <- as.data.frame(data)
# Fit the linear model
model <- lm(Y ~ X, data = df)
# Plot Residuals vs Fitted values
plot(fitted(model), residuals(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted (Before Transformation)")
abline(h = 0, col = "red")
# QQ plot of residuals
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
# Load necessary library for Box-Cox transformation
library(MASS)
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data = df), plotit = TRUE)
df
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data=df), plotit = TRUE)
# Load necessary library for reading Excel files
library(readxl)
# Load necessary library for Box-Cox transformation
library(MASS)
# Load the data
data <- read_excel("Electricity_Data.xlsx")
# Convert the data to a data frame
df <- as.data.frame(data)
# Fit the linear model
model <- lm(Y ~ X, data = df)
# Plot Residuals vs Fitted values
plot(fitted(model), residuals(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted (Before Transformation)")
abline(h = 0, col = "red")
# QQ plot of residuals
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data=df), plotit = TRUE)
lm(Y ~ X, data=df)
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data=df), plotit = TRUE)
# Apply Box-Cox transformation to Y
boxcox_model <- boxcox(lm(Y ~ X, data=df))
library(readxl)
# P2
data.File2 <- read_excel("TimeDeliveryData.xlsx")
model2 <- lm(Y ~ X1 + X2, data = data.File2)
model2$coefficients
# Plot the standardized residual plot
plot(model2, which = 1, main = "Standardized Residue Plot")
X1 <- data.File2$X1
X2 <- data.File2$X2
Y <- data.File2$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
# Print results
print("Coefficients:")
print(beta)
print("Fitted values:")
print(fitted_values)
print("Residuals:")
print(residuals)
print("Standardized Residuals:")
print(standardized_residuals)
H <- X %*% XtX_inv %*% t(X)
h1 <- sqrt(1-diag(H))
studentized_residuals <- standardized_residuals/h1
studentized_residuals
press_residuals <- residuals/(1-diag(H))
press_residuals
e_sq_term <- residuals^2 / (1 - diag(H))
n_p <- (length(Y) - ncol(X))
S_squared <- (sum(residuals^2) - e_sq_term)/(n_p-1)
S_squared
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
R_student_residuals
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
library(readxl)
# P2
data.File2 <- read_excel("TimeDeliveryData.xlsx")
model2 <- lm(Y ~ X1 + X2, data = data.File2)
model2$coefficients
# Plot the standardized residual plot
plot(model2, which = 1, main = "Standardized Residue Plot")
X1 <- data.File2$X1
X2 <- data.File2$X2
Y <- data.File2$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
print("Coefficients:")
print(beta)
print("Fitted values:")
print(fitted_values)
print("Residuals:")
print(residuals)
# Print results
cat("Coefficients: ", beta)
print("Fitted values: ", fitted_values)
cat("Fitted values: ", fitted_values)
cat("Residuals: ", residuals)
cat("Standardized Residuals: ", standardized_residuals)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
cat("PRESS Residuals: ", press_residuals)
library(readxl)
# Load the Data
data <- read_excel("TimeDeliveryData.xlsx")
X1 <- data$X1
X2 <- data$X2
Y <- data$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
cat("Coefficients: ", beta)
cat("Fitted values: ", fitted_values)
cat("Residuals: ", residuals)
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
cat("Standardized Residuals: ", standardized_residuals)
# Calculate Studentized Residuals
H <- X %*% XtX_inv %*% t(X)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
# Calculate PRESS Residuals
press_residuals <- residuals/(1-diag(H))
cat("PRESS Residuals: ", press_residuals)
# Calculate R-Student Residuals
e_sq_term <- residuals^2 / (1 - diag(H))
S_squared <- (sum(residuals^2) - e_sq_term)/(length(Y) - ncol(X) -1)
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
cat("R-Student: ", R_student_residuals)
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
library(readxl)
# Load the Data
data <- read_excel("TimeDeliveryData.xlsx")
X1 <- data$X1
X2 <- data$X2
Y <- data$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
cat("Coefficients: ", beta)
cat("Fitted values: ", fitted_values)
cat("Residuals: ", residuals)
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
cat("Standardized Residuals: ", standardized_residuals)
# Calculate Studentized Residuals
H <- X %*% XtX_inv %*% t(X)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
# Calculate PRESS Residuals
press_residuals <- residuals/(1-diag(H))
cat("PRESS Residuals: ", press_residuals)
# Calculate R-Student Residuals
e_sq_term <- residuals^2 / (1 - diag(H))
S_squared <- (sum(residuals^2) - e_sq_term)/(length(Y) - ncol(X) -1)
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
cat("R-Student: ", R_student_residuals)
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
library(readxl)
# Load the Data
data <- read_excel("TimeDeliveryData.xlsx")
X1 <- data$X1
X2 <- data$X2
Y <- data$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
cat("Coefficients: ", beta,'\n')
cat("Fitted values: ", fitted_values,'\n')
cat("Residuals: ", residuals,'\n')
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
cat("Standardized Residuals: ", standardized_residuals)
# Calculate Studentized Residuals
H <- X %*% XtX_inv %*% t(X)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
# Calculate PRESS Residuals
press_residuals <- residuals/(1-diag(H))
cat("PRESS Residuals: ", press_residuals)
# Calculate R-Student Residuals
e_sq_term <- residuals^2 / (1 - diag(H))
S_squared <- (sum(residuals^2) - e_sq_term)/(length(Y) - ncol(X) -1)
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
cat("R-Student: ", R_student_residuals)
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
library(readxl)
# Load the Data
data <- read_excel("TimeDeliveryData.xlsx")
X1 <- data$X1
X2 <- data$X2
Y <- data$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
cat("Coefficients: ", beta,'\n')
cat("Fitted values: ", fitted_values,'\n')
cat("Residuals: ", residuals,'\n')
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
cat("Standardized Residuals: ", standardized_residuals)
# Calculate Studentized Residuals
H <- X %*% XtX_inv %*% t(X)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
# Calculate PRESS Residuals
press_residuals <- residuals/(1-diag(H))
cat("PRESS Residuals: ", press_residuals)
# Calculate R-Student Residuals
e_sq_term <- residuals^2 / (1 - diag(H))
S_squared <- (sum(residuals^2) - e_sq_term)/(length(Y) - ncol(X) -1)
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
cat("R-Student: ", R_student_residuals)
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
library(readxl)
# Load the Data
data <- read_excel("TimeDeliveryData.xlsx")
X1 <- data$X1
X2 <- data$X2
Y <- data$Y
# Combine X1 and X2 into a matrix of predictors
X <- cbind(1, X1, X2)  # Add a column of 1s for the intercept term
# Fit the linear model using ordinary least squares
# Compute the coefficients (beta) using the normal equation: beta = (X'X)^-1 * X'Y
XtX <- t(X) %*% X
XtX_inv <- solve(XtX)
XtY <- t(X) %*% Y
beta <- XtX_inv %*% XtY
# Calculate the fitted values
fitted_values <- X %*% beta
# Calculate residuals
residuals <- Y - fitted_values
# Print results
cat("Coefficients: ", beta,'\n')
cat("Fitted values: ", fitted_values,'\n')
cat("Residuals: ", residuals,'\n')
# Calculate the standard deviation of the residuals
sigma_squared <- sum(residuals^2) / (length(Y) - ncol(X))
std_dev_residuals <- sqrt(sigma_squared)
# Calculate standardized residuals
standardized_residuals <- residuals / std_dev_residuals
cat("Standardized Residuals: ", standardized_residuals)
# Calculate Studentized Residuals
H <- X %*% XtX_inv %*% t(X)
studentized_residuals <- standardized_residuals/sqrt(1-diag(H))
cat("Studentized Residuals: ", studentized_residuals)
# Calculate PRESS Residuals
press_residuals <- residuals/(1-diag(H))
cat("PRESS Residuals: ", press_residuals)
# Calculate R-Student Residuals
e_sq_term <- residuals^2 / (1 - diag(H))
S_squared <- (sum(residuals^2) - e_sq_term)/(length(Y) - ncol(X) -1)
R_student_residuals <- residuals/sqrt(S_squared*(1-diag(H)))
cat("R-Student: ", R_student_residuals)
# Plot Fitted Values vs. R-Student
plot(fitted_values, R_student_residuals,
xlab = "Fitted Values",
ylab = "R-Student",
main = "Fitted Values vs. R-Student")
abline(h = 0, col = "red")
# QQ Plot
qqnorm(residuals)
qqline(residuals, col = "red")
