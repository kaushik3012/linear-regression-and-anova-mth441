library(tidyr)
library(MASS)
library(ggplot2)
data = read_excel('Electricity_Data.xlsx')
model = lm(Y~X, data)
g1 = ggplot()+
geom_point(aes(model$fitted.values, resid(model) ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#find optimal lambda for Box-Cox transformation
box_cox <- boxcox(Y ~ X, data = data)
(lambda <- box_cox$x[which.max(box_cox$y)])
#transformed model
box_cox_transform <- function(Y, lambda) { if (lambda == 0) {
return(log(Y)) } else {
return((Y^lambda - 1) / lambda)
} }
Y1 <- box_cox_transform(data$Y, lambda)
model_bc = lm(Y1~data$X)
g2 = ggplot()+
geom_point(aes(model_bc$fitted.values, model_bc %>% resid() ))+
labs(title = 'Residual Plot after Box-Cox transformation',
x = 'Yhat',
y = 'e')
plot(data$X, model_bc %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model %>% resid(), xlab="X", ylab="Residuals after Box Cox")
plot(g1)
plot(g2)
plot(data$X, data$Y)
abline(model, col="red")
plot(data$X, Y1)
abline(model_bc, col="red")
plot(data$X, Y1, xlab="X", ylab="transformed Y")
abline(model_bc, col="red")
#Question 2
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% rstudent() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
alpha = bt$result[1]
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = data$X %>% box_tidwell_tranform()
#Question 2
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% rstudent() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
alpha = bt$result[1]
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = data$X %>% box_tidwell_tranform()
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% rstudent() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% rstudent() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
#Question 2
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
#Question 2
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
plot(data$X, data$Y)
abline(model, col="red")
plot(data$X, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
plot(data$X1, data$Y, xlab="Tranformed X", ylab = "Y")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
plot(g4)
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
#Question 2
library(readxl)
library(ggplot2)
library(car)
data = read_excel('Wind_Mill_Data.xlsx')
model = lm(Y~X, data)
g3 = ggplot()+
geom_point(aes(model$fitted.values, model %>% resid() ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#optimal value of alpha for box-tidwell transformation
bt = boxTidwell(Y~X, data = data)
box_tidwell_tranform <- function(X, lambda) {
if (lambda == 0) {
return(log(X)) } else {
return(X^lambda) }
}
X1 = box_tidwell_tranform(data$X, bt$result[1])
model_bt = lm(data$Y~X1)
g4 = ggplot()+
geom_point(aes(model_bt$fitted.values, model_bt %>% resid() ))+
labs(title = 'Residual Plot after Box-Tidwell transformation',
x = 'Yhat',
y = 'e')
plot(g3)
plot(g4)
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bc %>% resid(), xlab="X", ylab="Residuals after Box Cox")
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bt %>% resid(), xlab="X", ylab="Residuals after Box Tidwell")
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bt %>% resid(), xlab="X", ylab="Residuals after Box Tidwell")
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bt %>% resid(), xlab="X", ylab="Residuals after Box Tidwell")
plot(g3)
plot(g4)
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bt %>% resid(), xlab="X", ylab="Residuals after Box Tidwell")
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
plot(g3)
plot(g4)
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bt %>% resid(), xlab="X", ylab="Residuals after Box Tidwell")
plot(data$X, data$Y)
abline(model, col="red")
plot(X1, data$Y, xlab="Tranformed X", ylab = "Y")
abline(model_bt, col="red")
plot(g4)
# Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
# Step 2: Plot the residuals from an initial linear model
initial_model <- lm(Y ~ X, data = data)
initial_residuals <- residuals(initial_model)
# Plot the residuals
ggplot(data, aes(x = X, y = initial_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Initial Residual Plot", x = "X", y = "Residuals")
# Step 3: Divide data into groups based on regressor values
# Here, we'll assume splitting the data into quartiles for demonstration.
data <- data %>%
mutate(group = ntile(X, 4))
# Step 4: Compute the sample mean and variance of each group
group_stats <- data %>%
group_by(group) %>%
summarize(mean_X = mean(X), mean_Y = mean(Y), var_Y = var(Y), var_X=var(X))
# Step 5: Scatter plot of the group means and variances
ggplot(group_stats, aes(x = mean_Y, y = var_Y)) +
geom_point() +
labs(title = "Scatter Plot of Group Means", x = "Mean of Y", y = "Variance of Y")
# Step 6: Fit an appropriate regression model (including a quadratic term)
quad_model <- lm(Y ~ poly(X, 2), data = data)
summary(quad_model)
# Step 7: Compute the fitted values
fitted_values <- fitted(quad_model)
# Step 8: Use these fitted values as reciprocal of the weights
weights <- 1 / abs(fitted_values)
# Step 9: Fit a weighted least squares model
wls_model <- lm(Y ~ X, data = data, weights = weights)
summary(wls_model)
# Step 10: Observe the residual plot of the WLS model
wls_residuals <- residuals(wls_model)
ggplot(data, aes(x = X, y = wls_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residual Plot after WLS", x = "X", y = "Residuals")
plot(X, Y)
# Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
# Step 2: Plot the residuals from an initial linear model
initial_model <- lm(Y ~ X, data = data)
initial_residuals <- residuals(initial_model)
# Plot the residuals
ggplot(data, aes(x = X, y = initial_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Initial Residual Plot", x = "X", y = "Residuals")
# Step 3: Divide data into groups based on regressor values
# Here, we'll assume splitting the data into quartiles for demonstration.
data <- data %>%
mutate(group = ntile(X, 4))
# Step 4: Compute the sample mean and variance of each group
group_stats <- data %>%
group_by(group) %>%
summarize(mean_X = mean(X), mean_Y = mean(Y), var_Y = var(Y), var_X=var(X))
# Step 5: Scatter plot of the group means and variances
ggplot(group_stats, aes(x = mean_Y, y = var_Y)) +
geom_point() +
labs(title = "Scatter Plot of Group Means", x = "Mean of Y", y = "Variance of Y")
# Step 6: Fit an appropriate regression model (including a quadratic term)
quad_model <- lm(Y ~ poly(X, 2), data = data)
summary(quad_model)
# Step 7: Compute the fitted values
fitted_values <- fitted(quad_model)
# Step 8: Use these fitted values as reciprocal of the weights
weights <- 1 / abs(fitted_values)
# Step 9: Fit a weighted least squares model
wls_model <- lm(Y ~ X, data = data, weights = weights)
summary(wls_model)
# Step 10: Observe the residual plot of the WLS model
wls_residuals <- residuals(wls_model)
ggplot(data, aes(x = X, y = wls_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residual Plot after WLS", x = "X", y = "Residuals")
plot(X, Y)
plot(X, Y)
plot(data$X, data%Y)
plot(data$X, data%Y)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
data1 <- data
plot(data1$X, data1%Y)
abline(wls_model)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
data1 <- data
plot(data1$X, data1%Y)
data
data$X
data$Y
plot(data$X, data$Y)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
x_og <- data$X
y_og <- data$Y
plot(x_og, y_og)
abline(wls_model)
plot(x_og, y_og)
abline(initial_model)
plot(x_og, y_og, xlab="X", ylab="Y", main="Initial Model")
abline(initial_model, col="red")
plot(x_og, y_og, xlab="X", ylab="Y", main="WLS Model")
abline(wls_model, col="red")
# Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
# Step 1: Load the data
data <- read_excel("Weighted_Least_Squares_Data.xlsx")
x_og <- data$X
y_og <- data$Y
# Step 2: Plot the residuals from an initial linear model
initial_model <- lm(Y ~ X, data = data)
initial_residuals <- residuals(initial_model)
# Plot the residuals
ggplot(data, aes(x = X, y = initial_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Initial Residual Plot", x = "X", y = "Residuals")
# Step 3: Divide data into groups based on regressor values
# Here, we'll assume splitting the data into quartiles for demonstration.
data <- data %>%
mutate(group = ntile(X, 4))
# Step 4: Compute the sample mean and variance of each group
group_stats <- data %>%
group_by(group) %>%
summarize(mean_X = mean(X), mean_Y = mean(Y), var_Y = var(Y), var_X=var(X))
# Step 5: Scatter plot of the group means and variances
ggplot(group_stats, aes(x = mean_Y, y = var_Y)) +
geom_point() +
labs(title = "Scatter Plot of Group Means", x = "Mean of Y", y = "Variance of Y")
# Step 6: Fit an appropriate regression model (including a quadratic term)
quad_model <- lm(Y ~ poly(X, 2), data = data)
summary(quad_model)
# Step 7: Compute the fitted values
fitted_values <- fitted(quad_model)
# Step 8: Use these fitted values as reciprocal of the weights
weights <- 1 / abs(fitted_values)
# Step 9: Fit a weighted least squares model
wls_model <- lm(Y ~ X, data = data, weights = weights)
summary(wls_model)
# Step 10: Observe the residual plot of the WLS model
wls_residuals <- residuals(wls_model)
ggplot(data, aes(x = X, y = wls_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residual Plot after WLS", x = "X", y = "Residuals")
plot(x_og, y_og, xlab="X", ylab="Y", main="Initial Model")
abline(initial_model, col="red")
plot(x_og, y_og, xlab="X", ylab="Y", main="WLS Model")
abline(wls_model, col="red")
ggplot(data, aes(x = X, y = wls_residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residual Plot after WLS", x = "X", y = "Residuals")
summary(initial_model)
#Question 1
#============
library(readxl)
library(tidyr)
library(MASS)
library(ggplot2)
data = read_excel('Electricity_Data.xlsx')
model = lm(Y~X, data)
g1 = ggplot()+
geom_point(aes(model$fitted.values, resid(model) ))+
labs(title = 'Residual Plot',
x = 'Yhat',
y = 'e')
#find optimal lambda for Box-Cox transformation
box_cox <- boxcox(Y ~ X, data = data)
(lambda <- box_cox$x[which.max(box_cox$y)])
#transformed model
box_cox_transform <- function(Y, lambda) { if (lambda == 0) {
return(log(Y)) } else {
return((Y^lambda - 1) / lambda)
} }
Y1 <- box_cox_transform(data$Y, lambda)
model_bc = lm(Y1~data$X)
g2 = ggplot()+
geom_point(aes(model_bc$fitted.values, model_bc %>% resid() ))+
labs(title = 'Residual Plot after Box-Cox transformation',
x = 'Yhat',
y = 'e')
plot(data$X, model %>% resid(), xlab = "X", ylab="Residuals")
plot(data$X,model_bc %>% resid(), xlab="X", ylab="Residuals after Box Cox")
plot(g1)
plot(g2)
plot(data$X, data$Y)
abline(model, col="red")
plot(data$X, Y1, xlab="X", ylab="transformed Y")
abline(model_bc, col="red")
