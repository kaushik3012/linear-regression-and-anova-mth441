calculate_vdp <- function(eigen_vectors, eigen_values, vifs) {
p <- ncol(eigen_vectors)  # Number of predictors
vdp_matrix <- matrix(0, nrow = p, ncol = p)  # Create a matrix to store VDPs
# Loop over each predictor and each eigenvalue
for (j in 1:p) {
for (i in 1:p) {
t_ji <- eigen_vectors[j, i]  # Element of the eigenvector matrix
lam_i <- eigen_values[i]  # Square root of the eigenvalue
vdp_matrix[i, j] <- (t_ji^2 / lam_i) / vifs[j]  # Calculate the VDP
}
}
return(vdp_matrix)
}
# Compute the Variance Decomposition Proportions
vdp <- calculate_vdp(eigen_vectors, eigen_values, vifs)
# Display the VDP matrix
vdp
eigen_values
eigen_vectors <- eigen(XTX_inv)$vectors
XtX <- t(X) %*% X
# Compute the inverse of (X^T X)
XtX_inv <- solve(XtX)
eigen_vectors <- eigen(XTX_inv)$vectors
XtX <- t(X) %*% X
# Compute the inverse of (X^T X)
XtX_inv <- solve(XtX)
eigen_vectors <- eigen(XTX_inv)$vectors
XtX <- t(X) %*% X
# Compute the inverse of (X^T X)
XtX_inv <- solve(XtX)
eigen_vectors <- eigen(XtX_inv)$vectors
eigen_vectors
eigen_values
cov_matrix <- cov(X)
XtX <- t(X) %*% X
# Compute the inverse of (X^T X)
XtX_inv <- solve(XtX)
eigen_values <- eigen(XtX_inv)$values
condition_number <- max(eigen_values) / min(eigen_values)
condition_number
eigen_vectors <- eigen(XtX_inv)$vectors
eigen_vectors
eigen_v
eigen_vectors <- eigen(XtX_inv)$vectors
eigen_vectors
calculate_vdp <- function(eigen_vectors, eigen_values, vifs) {
p <- ncol(eigen_vectors)  # Number of predictors
vdp_matrix <- matrix(0, nrow = p, ncol = p)  # Create a matrix to store VDPs
# Loop over each predictor and each eigenvalue
for (j in 1:p) {
for (i in 1:p) {
t_ji <- eigen_vectors[j, i]  # Element of the eigenvector matrix
lam_i <- eigen_values[i]  # Square root of the eigenvalue
vdp_matrix[i, j] <- (t_ji^2 / lam_i) / vifs[j]  # Calculate the VDP
}
}
return(vdp_matrix)
}
# Compute the Variance Decomposition Proportions
vdp <- calculate_vdp(eigen_vectors, eigen_values, vifs)
# Display the VDP matrix
vdp
cov_matrix <- cov(X)
XtX <- t(X) %*% X
# Compute the inverse of (X^T X)
XtX_inv <- solve(XtX)
eigen_values <- eigen(XtX)$values
condition_number <- max(eigen_values) / min(eigen_values)
condition_number
eigen_vectors <- eigen(XtX)$vectors
eigen_vectors
calculate_vdp <- function(eigen_vectors, eigen_values, vifs) {
p <- ncol(eigen_vectors)  # Number of predictors
vdp_matrix <- matrix(0, nrow = p, ncol = p)  # Create a matrix to store VDPs
# Loop over each predictor and each eigenvalue
for (j in 1:p) {
for (i in 1:p) {
t_ji <- eigen_vectors[j, i]  # Element of the eigenvector matrix
lam_i <- eigen_values[i]  # Square root of the eigenvalue
vdp_matrix[i, j] <- (t_ji^2 / lam_i) / vifs[j]  # Calculate the VDP
}
}
return(vdp_matrix)
}
# Compute the Variance Decomposition Proportions
vdp <- calculate_vdp(eigen_vectors, eigen_values, vifs)
# Display the VDP matrix
vdp
library(MPV)
softdrink
p2.9
p15.4
data <- data(p15.4)
data <- p15.4
data <- p15.4
data
library(MPV)
data <- p15.4
view(data)
library(MPV)
data <- p15.4
print(data)
library(MPV)
time_delivery_data <- p15.4
print(time_delivery_data)
# Load required libraries
library(tidyverse)
library(leaps)
# Split the data into Estimation and Prediction sets
set.seed(123)  # for reproducibility
n <- nrow(time_delivery_data)
indices <- sample(1:n, size = n/2)
estimation_data <- time_delivery_data[indices, ]
prediction_data <- time_delivery_data[-indices, ]
# (a) Propose two regression models based on subset selection criteria
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# (b) Compare regression coefficients for Prediction and Estimation data sets
# Function to fit model and extract coefficients
fit_and_extract <- function(formula, data) {
model <- lm(formula, data)
coef(model)
}
# Fit models and extract coefficients
coef_est_1 <- fit_and_extract(formula_1, estimation_data)
coef_pred_1 <- fit_and_extract(formula_1, prediction_data)
coef_est_2 <- fit_and_extract(formula_2, estimation_data)
coef_pred_2 <- fit_and_extract(formula_2, prediction_data)
# Print coefficients
cat("Model 1 coefficients:\n")
print(rbind(Estimation = coef_est_1, Prediction = coef_pred_1))
cat("\nModel 2 coefficients:\n")
print(rbind(Estimation = coef_est_2, Prediction = coef_pred_2))
# (c) Compute PRESS statistics and R2 prediction
# Function to compute PRESS and R2 prediction
compute_press_r2pred <- function(formula, train_data, test_data) {
model <- lm(formula, train_data)
# PRESS statistic
press <- sum((resid(model) / (1 - hatvalues(model)))^2)
# R2 prediction
predictions <- predict(model, newdata = test_data)
sse <- sum((test_data$y - predictions)^2)
sst <- sum((test_data$y - mean(train_data$y))^2)
r2_pred <- 1 - sse / sst
list(press = press, r2_pred = r2_pred)
}
# Compute PRESS and R2 prediction for both models
results_1 <- compute_press_r2pred(formula_1, estimation_data, prediction_data)
results_2 <- compute_press_r2pred(formula_2, estimation_data, prediction_data)
# Print results
cat("\nModel 1 results:\n")
print(results_1)
cat("\nModel 2 results:\n")
print(results_2)
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
best_subset_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
set.seed(123)  # for reproducibility
n <- nrow(time_delivery_data)
indices <- sample(1:n, size = n/2)
estimation_data <- time_delivery_data[indices, ]
prediction_data <- time_delivery_data[-indices, ]
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
best_subset_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
summary_out
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
print(summary_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
print(summary_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 5)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "exhaustive")
summary_out <- summary(regsubsets_out)
print(summary_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to fit model and extract coefficients
fit_and_extract <- function(formula, data) {
model <- lm(formula, data)
coef(model)
}
# Fit models and extract coefficients
coef_est_1 <- fit_and_extract(formula_1, estimation_data)
coef_pred_1 <- fit_and_extract(formula_1, prediction_data)
coef_est_2 <- fit_and_extract(formula_2, estimation_data)
coef_pred_2 <- fit_and_extract(formula_2, prediction_data)
# Print coefficients
cat("Model 1 coefficients:\n")
print(rbind(Estimation = coef_est_1, Prediction = coef_pred_1))
cat("\nModel 2 coefficients:\n")
print(rbind(Estimation = coef_est_2, Prediction = coef_pred_2))
# Function to compute PRESS and R2 prediction
compute_press_r2pred <- function(formula, train_data, test_data) {
model <- lm(formula, train_data)
# PRESS statistic
press <- sum((resid(model) / (1 - hatvalues(model)))^2)
# R2 prediction
predictions <- predict(model, newdata = test_data)
sse <- sum((test_data$y - predictions)^2)
sst <- sum((test_data$y - mean(train_data$y))^2)
r2_pred <- 1 - sse / sst
list(press = press, r2_pred = r2_pred)
}
# Compute PRESS and R2 prediction for both models
results_1 <- compute_press_r2pred(formula_1, estimation_data, prediction_data)
results_2 <- compute_press_r2pred(formula_2, estimation_data, prediction_data)
# Print results
cat("\nModel 1 results:\n")
print(results_1)
cat("\nModel 2 results:\n")
print(results_2)
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
print(summary_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
best_subset_1
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
formula_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
formula_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to fit model and extract coefficients
fit_and_extract <- function(formula, data) {
model <- lm(formula, data)
coef(model)
}
# Fit models and extract coefficients
coef_est_1 <- fit_and_extract(formula_1, estimation_data)
coef_pred_1 <- fit_and_extract(formula_1, prediction_data)
coef_est_2 <- fit_and_extract(formula_2, estimation_data)
coef_pred_2 <- fit_and_extract(formula_2, prediction_data)
# Print coefficients
cat("Model 1 coefficients:\n")
print(rbind(Estimation = coef_est_1, Prediction = coef_pred_1))
cat("\nModel 2 coefficients:\n")
print(rbind(Estimation = coef_est_2, Prediction = coef_pred_2))
# Function to compute PRESS and R2 prediction
compute_press_r2pred <- function(formula, train_data, test_data) {
model <- lm(formula, train_data)
# PRESS statistic
press <- sum((resid(model) / (1 - hatvalues(model)))^2)
# R2 prediction
predictions <- predict(model, newdata = test_data)
sse <- sum((test_data$y - predictions)^2)
sst <- sum((test_data$y - mean(train_data$y))^2)
r2_pred <- 1 - sse / sst
list(press = press, r2_pred = r2_pred)
}
# Compute PRESS and R2 prediction for both models
results_1 <- compute_press_r2pred(formula_1, estimation_data, prediction_data)
results_2 <- compute_press_r2pred(formula_2, estimation_data, prediction_data)
# Print results
cat("\nModel 1 results:\n")
print(results_1)
cat("\nModel 2 results:\n")
print(results_2)
estimation_data <- time_delivery_data[time_delivery_data$set=='e']
estimation_data <- time_delivery_data[time_delivery_data$set='e']
estimation_data <- time_delivery_data[time_delivery_data$set=='e']
estimation_data <- time_delivery_data[time_delivery_data$set=='e', ]
prediction_data <- time_delivery_data[time_delivery_data$set=='p', ]
estimation_data
prediction_data
prediction_data
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
set.seed(123)  # for reproducibility
n <- nrow(time_delivery_data)
indices <- sample(1:n, size = n/2)
estimation_data <- time_delivery_data[indices, ]
prediction_data <- time_delivery_data[-indices, ]
estimation_data
estimation_data <- time_delivery_data[time_delivery_data$set=='e', ]
prediction_data <- time_delivery_data[time_delivery_data$set=='p', ]
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
set.seed(123)  # for reproducibility
n <- nrow(time_delivery_data)
indices <- sample(1:n, size = n/2)
estimation_data <- time_delivery_data[indices, ]
prediction_data <- time_delivery_data[-indices, ]
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
formula_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
estimation_data <- time_delivery_data[time_delivery_data$set=='e', ]
prediction_data <- time_delivery_data[time_delivery_data$set=='p', ]
time_delivery_data[1,]
time_delivery_data[1,x1]
time_delivery_data[1,]
time_delivery_data[1,]$x1
time_delivery_data[1,]
time_delivery_data[1,"x1"]
time_delivery_data[1,c("x1", "x2")]
time_delivery_data[1,]
time_delivery_data[1, c("x1", "x2", "y")]
set.seed(123)  # for reproducibility
n <- nrow(time_delivery_data)
indices <- sample(1:n, size = n/2)
estimation_data <- time_delivery_data[indices, c("x1", "x2", "y")]
prediction_data <- time_delivery_data[-indices, c("x1", "x2", "y")]
time_delivery_data
estimation_data
estimation_data <- time_delivery_data[time_delivery_data$set=='e', c("x1", "x2", "y")]
prediction_data <- time_delivery_data[time_delivery_data$set=='p', c("x1", "x2", "y")]
# Function to perform subset selection and return the best model
get_best_subset <- function(data, nvmax) {
regsubsets_out <- regsubsets(y ~ ., data = data, nvmax = nvmax, method = "forward")
summary_out <- summary(regsubsets_out)
which.min(summary_out$bic)
}
# Model 1: Based on BIC
best_subset_1 <- get_best_subset(estimation_data, nvmax = 2)
formula_1 <- as.formula(paste("y ~", paste(names(coef(lm(y ~ ., estimation_data)))[2:best_subset_1], collapse = " + ")))
formula_1
# Model 2: Full model
formula_2 <- y ~ x1 + x2
# Function to fit model and extract coefficients
fit_and_extract <- function(formula, data) {
model <- lm(formula, data)
coef(model)
}
# Fit models and extract coefficients
coef_est_1 <- fit_and_extract(formula_1, estimation_data)
coef_pred_1 <- fit_and_extract(formula_1, prediction_data)
coef_est_2 <- fit_and_extract(formula_2, estimation_data)
coef_pred_2 <- fit_and_extract(formula_2, prediction_data)
# Print coefficients
cat("Model 1 coefficients:\n")
print(rbind(Estimation = coef_est_1, Prediction = coef_pred_1))
cat("\nModel 2 coefficients:\n")
print(rbind(Estimation = coef_est_2, Prediction = coef_pred_2))
setwd("~/Library/CloudStorage/OneDrive-IITKanpur/Documents/SEM9 - IITK/MTH441/Lab 9")
